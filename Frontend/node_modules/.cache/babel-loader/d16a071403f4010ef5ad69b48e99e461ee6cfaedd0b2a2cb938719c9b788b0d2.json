{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tn3402\\\\Desktop\\\\Minor\\\\frontend\\\\src\\\\components\\\\DijkstraForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/DijkstraForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DijkstraForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [graph, setGraph] = useState('');\n  const [source, setSource] = useState('');\n  const [cities, setCities] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Parse graph input into a proper format (parse as a matrix)\n    const parsedGraph = graph.split('\\n').map(row => row.split(',').map(Number)); // assuming distances are numeric\n\n    const cityNames = cities.split(','); // split city names into array\n\n    // The source node is now a city name, so we find its index\n    const sourceIndex = cityNames.indexOf(source);\n    onSubmit(parsedGraph, sourceIndex, cityNames);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dijkstra-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dijkstra-form-title\",\n      children: \"Enter Graph Data (Cities and Distances)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"dijkstra-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"City Names (comma-separated):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: cities,\n          onChange: e => setCities(e.target.value),\n          placeholder: \"Enter city names (e.g., CityA,CityB,CityC)\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: graph,\n          onChange: e => setGraph(e.target.value),\n          placeholder: \"Enter distances as rows of comma-separated numbers\",\n          className: \"dijkstra-form-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Source City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: source,\n          onChange: e => setSource(e.target.value),\n          placeholder: \"Enter source city\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"dijkstra-form-button\",\n        children: \"Run Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(DijkstraForm, \"2v+XkTuVpmaQ8M4ukeMQwOpmy7E=\");\n_c = DijkstraForm;\nexport default DijkstraForm;\nvar _c;\n$RefreshReg$(_c, \"DijkstraForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DijkstraForm","onSubmit","_s","graph","setGraph","source","setSource","cities","setCities","handleSubmit","e","preventDefault","parsedGraph","split","map","row","Number","cityNames","sourceIndex","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Tn3402/Desktop/Minor/frontend/src/components/DijkstraForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/DijkstraForm.css';\r\n\r\nconst DijkstraForm = ({ onSubmit }) => {\r\n  const [graph, setGraph] = useState('');\r\n  const [source, setSource] = useState('');\r\n  const [cities, setCities] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Parse graph input into a proper format (parse as a matrix)\r\n    const parsedGraph = graph\r\n      .split('\\n')\r\n      .map((row) => row.split(',').map(Number));  // assuming distances are numeric\r\n    \r\n    const cityNames = cities.split(',');  // split city names into array\r\n    \r\n    // The source node is now a city name, so we find its index\r\n    const sourceIndex = cityNames.indexOf(source);\r\n\r\n    onSubmit(parsedGraph, sourceIndex, cityNames);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dijkstra-form-container\">\r\n      <h2 className=\"dijkstra-form-title\">Enter Graph Data (Cities and Distances)</h2>\r\n      <form onSubmit={handleSubmit} className=\"dijkstra-form\">\r\n        <label className=\"dijkstra-form-label\">\r\n          City Names (comma-separated):\r\n          <input\r\n            type=\"text\"\r\n            value={cities}\r\n            onChange={(e) => setCities(e.target.value)}\r\n            placeholder=\"Enter city names (e.g., CityA,CityB,CityC)\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\r\n          <textarea\r\n            value={graph}\r\n            onChange={(e) => setGraph(e.target.value)}\r\n            placeholder=\"Enter distances as rows of comma-separated numbers\"\r\n            className=\"dijkstra-form-textarea\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Source City:\r\n          <input\r\n            type=\"text\"\r\n            value={source}\r\n            onChange={(e) => setSource(e.target.value)}\r\n            placeholder=\"Enter source city\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\" className=\"dijkstra-form-button\">\r\n          Run Dijkstra\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DijkstraForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}