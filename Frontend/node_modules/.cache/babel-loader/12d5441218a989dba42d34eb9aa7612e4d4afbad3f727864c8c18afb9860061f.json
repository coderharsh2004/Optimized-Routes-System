{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tn3402\\\\Desktop\\\\Minor\\\\frontend\\\\src\\\\components\\\\DijkstraForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/DijkstraForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DijkstraForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [graph, setGraph] = useState('');\n  const [source, setSource] = useState('');\n  const [cities, setCities] = useState('');\n  const [shortestPaths, setShortestPaths] = useState(null); // State to store the results\n  const [error, setError] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    setError(''); // Reset error message on each submit attempt\n\n    // Parse graph input into a proper format (parse as a matrix)\n    let parsedGraph;\n    try {\n      parsedGraph = graph.split('\\n').map(row => row.split(',').map(item => {\n        const num = Number(item.trim());\n        if (isNaN(num)) throw new Error('Invalid distance value');\n        return num;\n      }));\n    } catch (err) {\n      setError('Invalid graph format. Ensure the input is a valid comma-separated matrix.');\n      return;\n    }\n\n    // Parse cities\n    const cityNames = cities.split(',').map(city => city.trim()); // Split cities and trim spaces\n\n    // Find the source index based on the city name\n    const sourceIndex = cityNames.indexOf(source.trim()); // Trim spaces for consistency\n\n    if (sourceIndex === -1) {\n      setError('Source city not found in the list of cities.');\n      return;\n    }\n\n    // Call the onSubmit with parsed data\n    onSubmit(parsedGraph, sourceIndex, cityNames, setShortestPaths); // Passing setShortestPaths for updating the state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dijkstra-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dijkstra-form-title\",\n      children: \"Enter Graph Data (Cities and Distances)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"dijkstra-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"City Names (comma-separated):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: cities,\n          onChange: e => setCities(e.target.value),\n          placeholder: \"Enter city names (e.g., CityA,CityB,CityC)\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: graph,\n          onChange: e => setGraph(e.target.value),\n          placeholder: \"Enter distances as rows of comma-separated numbers\",\n          className: \"dijkstra-form-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Source City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: source,\n          onChange: e => setSource(e.target.value),\n          placeholder: \"Enter source city\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"dijkstra-form-button\",\n        children: \"Run Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), shortestPaths && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dijkstra-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Shortest Distances from \", cities.split(',')[source]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: shortestPaths.map((distance, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [cities.split(',')[index], \": \", distance === Infinity ? 'Unreachable' : distance]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(DijkstraForm, \"oAGojpV85D0jfZzgUDqde0SQ/D8=\");\n_c = DijkstraForm;\nexport default DijkstraForm;\nvar _c;\n$RefreshReg$(_c, \"DijkstraForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DijkstraForm","onSubmit","_s","graph","setGraph","source","setSource","cities","setCities","shortestPaths","setShortestPaths","error","setError","handleSubmit","e","preventDefault","parsedGraph","split","map","row","item","num","Number","trim","isNaN","Error","err","cityNames","city","sourceIndex","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","distance","index","Infinity","_c","$RefreshReg$"],"sources":["C:/Users/Tn3402/Desktop/Minor/frontend/src/components/DijkstraForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/DijkstraForm.css';\r\n\r\nconst DijkstraForm = ({ onSubmit }) => {\r\n  const [graph, setGraph] = useState('');\r\n  const [source, setSource] = useState('');\r\n  const [cities, setCities] = useState('');\r\n  const [shortestPaths, setShortestPaths] = useState(null);  // State to store the results\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setError(''); // Reset error message on each submit attempt\r\n\r\n    // Parse graph input into a proper format (parse as a matrix)\r\n    let parsedGraph;\r\n    try {\r\n      parsedGraph = graph\r\n        .split('\\n')\r\n        .map((row) => row.split(',').map((item) => {\r\n          const num = Number(item.trim());\r\n          if (isNaN(num)) throw new Error('Invalid distance value');\r\n          return num;\r\n        }));\r\n    } catch (err) {\r\n      setError('Invalid graph format. Ensure the input is a valid comma-separated matrix.');\r\n      return;\r\n    }\r\n\r\n    // Parse cities\r\n    const cityNames = cities.split(',').map((city) => city.trim()); // Split cities and trim spaces\r\n\r\n    // Find the source index based on the city name\r\n    const sourceIndex = cityNames.indexOf(source.trim()); // Trim spaces for consistency\r\n\r\n    if (sourceIndex === -1) {\r\n      setError('Source city not found in the list of cities.');\r\n      return;\r\n    }\r\n\r\n    // Call the onSubmit with parsed data\r\n    onSubmit(parsedGraph, sourceIndex, cityNames, setShortestPaths); // Passing setShortestPaths for updating the state\r\n  };\r\n\r\n  return (\r\n    <div className=\"dijkstra-form-container\">\r\n      <h2 className=\"dijkstra-form-title\">Enter Graph Data (Cities and Distances)</h2>\r\n      <form onSubmit={handleSubmit} className=\"dijkstra-form\">\r\n        <label className=\"dijkstra-form-label\">\r\n          City Names (comma-separated):\r\n          <input\r\n            type=\"text\"\r\n            value={cities}\r\n            onChange={(e) => setCities(e.target.value)}\r\n            placeholder=\"Enter city names (e.g., CityA,CityB,CityC)\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\r\n          <textarea\r\n            value={graph}\r\n            onChange={(e) => setGraph(e.target.value)}\r\n            placeholder=\"Enter distances as rows of comma-separated numbers\"\r\n            className=\"dijkstra-form-textarea\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Source City:\r\n          <input\r\n            type=\"text\"\r\n            value={source}\r\n            onChange={(e) => setSource(e.target.value)}\r\n            placeholder=\"Enter source city\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\" className=\"dijkstra-form-button\">\r\n          Run Dijkstra\r\n        </button>\r\n\r\n        {/* Display any error messages */}\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n\r\n      {/* Display shortest path results */}\r\n      {shortestPaths && (\r\n        <div className=\"dijkstra-results\">\r\n          <h3>Shortest Distances from {cities.split(',')[source]}</h3>\r\n          <ul>\r\n            {shortestPaths.map((distance, index) => (\r\n              <li key={index}>\r\n                {cities.split(',')[index]}: {distance === Infinity ? 'Unreachable' : distance}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DijkstraForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC3D,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMgB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBH,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEd;IACA,IAAII,WAAW;IACf,IAAI;MACFA,WAAW,GAAGb,KAAK,CAChBc,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEE,IAAI,IAAK;QACzC,MAAMC,GAAG,GAAGC,MAAM,CAACF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;QAC/B,IAAIC,KAAK,CAACH,GAAG,CAAC,EAAE,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;QACzD,OAAOJ,GAAG;MACZ,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZd,QAAQ,CAAC,2EAA2E,CAAC;MACrF;IACF;;IAEA;IACA,MAAMe,SAAS,GAAGpB,MAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEU,IAAI,IAAKA,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEhE;IACA,MAAMM,WAAW,GAAGF,SAAS,CAACG,OAAO,CAACzB,MAAM,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEtD,IAAIM,WAAW,KAAK,CAAC,CAAC,EAAE;MACtBjB,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;;IAEA;IACAX,QAAQ,CAACe,WAAW,EAAEa,WAAW,EAAEF,SAAS,EAAEjB,gBAAgB,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,oBACEX,OAAA;IAAKgC,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCjC,OAAA;MAAIgC,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAAC;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChFrC,OAAA;MAAME,QAAQ,EAAEY,YAAa;MAACkB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBACrDjC,OAAA;QAAOgC,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,+BAErC,eAAAjC,OAAA;UACEsC,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE/B,MAAO;UACdgC,QAAQ,EAAGzB,CAAC,IAAKN,SAAS,CAACM,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;UAC3CG,WAAW,EAAC,4CAA4C;UACxDV,SAAS,EAAC;QAAqB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRrC,OAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNrC,OAAA;QAAOgC,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,8DAErC,eAAAjC,OAAA;UACEuC,KAAK,EAAEnC,KAAM;UACboC,QAAQ,EAAGzB,CAAC,IAAKV,QAAQ,CAACU,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;UAC1CG,WAAW,EAAC,oDAAoD;UAChEV,SAAS,EAAC;QAAwB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRrC,OAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNrC,OAAA;QAAOgC,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,cAErC,eAAAjC,OAAA;UACEsC,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEjC,MAAO;UACdkC,QAAQ,EAAGzB,CAAC,IAAKR,SAAS,CAACQ,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;UAC3CG,WAAW,EAAC,mBAAmB;UAC/BV,SAAS,EAAC;QAAqB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRrC,OAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNrC,OAAA;QAAQsC,IAAI,EAAC,QAAQ;QAACN,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAGRzB,KAAK,iBAAIZ,OAAA;QAAGgC,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAErB;MAAK;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAGN3B,aAAa,iBACZV,OAAA;MAAKgC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BjC,OAAA;QAAAiC,QAAA,GAAI,0BAAwB,EAACzB,MAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAACZ,MAAM,CAAC;MAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC5DrC,OAAA;QAAAiC,QAAA,EACGvB,aAAa,CAACS,GAAG,CAAC,CAACwB,QAAQ,EAAEC,KAAK,kBACjC5C,OAAA;UAAAiC,QAAA,GACGzB,MAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC0B,KAAK,CAAC,EAAC,IAAE,EAACD,QAAQ,KAAKE,QAAQ,GAAG,aAAa,GAAGF,QAAQ;QAAA,GADtEC,KAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClC,EAAA,CApGIF,YAAY;AAAA6C,EAAA,GAAZ7C,YAAY;AAsGlB,eAAeA,YAAY;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}