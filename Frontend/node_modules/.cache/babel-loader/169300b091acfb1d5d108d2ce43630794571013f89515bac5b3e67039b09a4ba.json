{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tn3402\\\\Desktop\\\\Minor\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Importing the CSS file\nimport DijkstraForm from './components/DijkstraForm'; // Update the path if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handleDijkstraSubmit = async (graph, sourceIndex, destinationIndex, cityNames) => {\n    console.log('Sending data to backend:', {\n      graph,\n      sourceIndex,\n      destinationIndex,\n      cityNames\n    });\n    try {\n      // Sending data to backend via POST request\n      const response = await fetch('http://localhost:5000/run-dijkstra', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          graph,\n          sourceIndex,\n          // Send source index\n          destinationIndex,\n          // Send destination index\n          cityNames // Send city names\n        })\n      });\n\n      // Handling the response\n      if (!response.ok) {\n        throw new Error('Error running Dijkstra algorithm');\n      }\n      const data = await response.json();\n\n      // Check if the destination is reachable\n      const {\n        sourceCity,\n        destinationCity,\n        destinationDistance\n      } = data;\n\n      // Prepare the result for display\n      const resultString = `\n        Source City: ${sourceCity}\n        Destination City: ${destinationCity}\n        Shortest Distance: ${destinationDistance === 'Unreachable' ? 'Unreachable' : destinationDistance}\n      `;\n      setResult(resultString); // Set the result to display\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      setError(err.message); // Display error message if request fails\n      setResult(null); // Clear any previous results\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dijkstra Algorithm - Find Shortest Path Between Cities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DijkstraForm, {\n      onSubmit: handleDijkstraSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Shortest Path from Source to Destination:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"+hd7pXXL56gFIycHaRMQPHnlkCk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DijkstraForm","jsxDEV","_jsxDEV","App","_s","result","setResult","error","setError","handleDijkstraSubmit","graph","sourceIndex","destinationIndex","cityNames","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","sourceCity","destinationCity","destinationDistance","resultString","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/Tn3402/Desktop/Minor/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // Importing the CSS file\nimport DijkstraForm from './components/DijkstraForm'; // Update the path if needed\n\nconst App = () => {\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handleDijkstraSubmit = async (graph, sourceIndex, destinationIndex, cityNames) => {\n    console.log('Sending data to backend:', { graph, sourceIndex, destinationIndex, cityNames });\n\n    try {\n      // Sending data to backend via POST request\n      const response = await fetch('http://localhost:5000/run-dijkstra', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          graph,\n          sourceIndex,  // Send source index\n          destinationIndex,  // Send destination index\n          cityNames,  // Send city names\n        }),\n      });\n\n      // Handling the response\n      if (!response.ok) {\n        throw new Error('Error running Dijkstra algorithm');\n      }\n\n      const data = await response.json();\n\n      // Check if the destination is reachable\n      const { sourceCity, destinationCity, destinationDistance } = data;\n\n      // Prepare the result for display\n      const resultString = `\n        Source City: ${sourceCity}\n        Destination City: ${destinationCity}\n        Shortest Distance: ${destinationDistance === 'Unreachable' ? 'Unreachable' : destinationDistance}\n      `;\n\n      setResult(resultString); // Set the result to display\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      setError(err.message); // Display error message if request fails\n      setResult(null); // Clear any previous results\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Dijkstra Algorithm - Find Shortest Path Between Cities</h1>\n      <DijkstraForm onSubmit={handleDijkstraSubmit} />\n      \n      {/* Display result or error */}\n      {result && (\n        <div className=\"result-container\">\n          <h3>Shortest Path from Source to Destination:</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"error-container\">\n          <h3>Error:</h3>\n          <p>{error}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}