{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tn3402\\\\Desktop\\\\Minor\\\\frontend\\\\src\\\\components\\\\DijkstraForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/DijkstraForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DijkstraForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [graph, setGraph] = useState('');\n  const [source, setSource] = useState('');\n  const [destination, setDestination] = useState(''); // New state for destination city\n  const [cities, setCities] = useState('');\n  const [shortestPaths, setShortestPaths] = useState(null); // State to store the results\n  const [error, setError] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    setError(''); // Reset error message on each submit attempt\n\n    // Parse graph input into a proper format (parse as a matrix)\n    let parsedGraph;\n    try {\n      parsedGraph = graph.split('\\n').map(row => row.split(',').map(item => {\n        const num = Number(item.trim());\n        if (isNaN(num)) throw new Error('Invalid distance value');\n        return num;\n      }));\n    } catch (err) {\n      setError('Invalid graph format. Ensure the input is a valid comma-separated matrix.');\n      return;\n    }\n\n    // Parse cities\n    const cityNames = cities.split(',').map(city => city.trim()); // Split cities and trim spaces\n\n    // Find the source index based on the city name\n    const sourceIndex = cityNames.indexOf(source.trim()); // Trim spaces for consistency\n    const destinationIndex = cityNames.indexOf(destination.trim()); // Trim spaces for destination city\n\n    if (sourceIndex === -1) {\n      setError('Source city not found in the list of cities.');\n      return;\n    }\n    if (destinationIndex === -1) {\n      setError('Destination city not found in the list of cities.');\n      return;\n    }\n\n    // Call the onSubmit with parsed data\n    onSubmit(parsedGraph, sourceIndex, destinationIndex, cityNames, setShortestPaths); // Pass destination index\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dijkstra-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dijkstra-form-title\",\n      children: \"Enter Graph Data (Cities and Distances)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"dijkstra-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"City Names (comma-separated):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: cities,\n          onChange: e => setCities(e.target.value),\n          placeholder: \"Enter city names (e.g., CityA,CityB,CityC)\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: graph,\n          onChange: e => setGraph(e.target.value),\n          placeholder: \"Enter distances as rows of comma-separated numbers\",\n          className: \"dijkstra-form-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Source City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: source,\n          onChange: e => setSource(e.target.value),\n          placeholder: \"Enter source city\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dijkstra-form-label\",\n        children: [\"Destination City:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: destination,\n          onChange: e => setDestination(e.target.value),\n          placeholder: \"Enter destination city\",\n          className: \"dijkstra-form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"dijkstra-form-button\",\n        children: \"Run Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), shortestPaths && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dijkstra-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Shortest Path from \", source, \" to \", destination]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: shortestPaths[destination] === Infinity ? 'Destination is Unreachable' : `Shortest Distance: ${shortestPaths[destination]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(DijkstraForm, \"YEZG2GHL1bTSRNLpcO2A+k6JfTc=\");\n_c = DijkstraForm;\nexport default DijkstraForm;\nvar _c;\n$RefreshReg$(_c, \"DijkstraForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DijkstraForm","onSubmit","_s","graph","setGraph","source","setSource","destination","setDestination","cities","setCities","shortestPaths","setShortestPaths","error","setError","handleSubmit","e","preventDefault","parsedGraph","split","map","row","item","num","Number","trim","isNaN","Error","err","cityNames","city","sourceIndex","indexOf","destinationIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","Infinity","_c","$RefreshReg$"],"sources":["C:/Users/Tn3402/Desktop/Minor/frontend/src/components/DijkstraForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/DijkstraForm.css';\r\n\r\nconst DijkstraForm = ({ onSubmit }) => {\r\n  const [graph, setGraph] = useState('');\r\n  const [source, setSource] = useState('');\r\n  const [destination, setDestination] = useState(''); // New state for destination city\r\n  const [cities, setCities] = useState('');\r\n  const [shortestPaths, setShortestPaths] = useState(null);  // State to store the results\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setError(''); // Reset error message on each submit attempt\r\n\r\n    // Parse graph input into a proper format (parse as a matrix)\r\n    let parsedGraph;\r\n    try {\r\n      parsedGraph = graph\r\n        .split('\\n')\r\n        .map((row) => row.split(',').map((item) => {\r\n          const num = Number(item.trim());\r\n          if (isNaN(num)) throw new Error('Invalid distance value');\r\n          return num;\r\n        }));\r\n    } catch (err) {\r\n      setError('Invalid graph format. Ensure the input is a valid comma-separated matrix.');\r\n      return;\r\n    }\r\n\r\n    // Parse cities\r\n    const cityNames = cities.split(',').map((city) => city.trim()); // Split cities and trim spaces\r\n\r\n    // Find the source index based on the city name\r\n    const sourceIndex = cityNames.indexOf(source.trim()); // Trim spaces for consistency\r\n    const destinationIndex = cityNames.indexOf(destination.trim()); // Trim spaces for destination city\r\n\r\n    if (sourceIndex === -1) {\r\n      setError('Source city not found in the list of cities.');\r\n      return;\r\n    }\r\n\r\n    if (destinationIndex === -1) {\r\n      setError('Destination city not found in the list of cities.');\r\n      return;\r\n    }\r\n\r\n    // Call the onSubmit with parsed data\r\n    onSubmit(parsedGraph, sourceIndex, destinationIndex, cityNames, setShortestPaths); // Pass destination index\r\n  };\r\n\r\n  return (\r\n    <div className=\"dijkstra-form-container\">\r\n      <h2 className=\"dijkstra-form-title\">Enter Graph Data (Cities and Distances)</h2>\r\n      <form onSubmit={handleSubmit} className=\"dijkstra-form\">\r\n        <label className=\"dijkstra-form-label\">\r\n          City Names (comma-separated):\r\n          <input\r\n            type=\"text\"\r\n            value={cities}\r\n            onChange={(e) => setCities(e.target.value)}\r\n            placeholder=\"Enter city names (e.g., CityA,CityB,CityC)\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Graph (distances as a comma-separated matrix, e.g. 0,1,4,0):\r\n          <textarea\r\n            value={graph}\r\n            onChange={(e) => setGraph(e.target.value)}\r\n            placeholder=\"Enter distances as rows of comma-separated numbers\"\r\n            className=\"dijkstra-form-textarea\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Source City:\r\n          <input\r\n            type=\"text\"\r\n            value={source}\r\n            onChange={(e) => setSource(e.target.value)}\r\n            placeholder=\"Enter source city\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className=\"dijkstra-form-label\">\r\n          Destination City:\r\n          <input\r\n            type=\"text\"\r\n            value={destination}\r\n            onChange={(e) => setDestination(e.target.value)}\r\n            placeholder=\"Enter destination city\"\r\n            className=\"dijkstra-form-input\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\" className=\"dijkstra-form-button\">\r\n          Run Dijkstra\r\n        </button>\r\n\r\n        {/* Display any error messages */}\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n\r\n      {/* Display shortest path results */}\r\n      {shortestPaths && (\r\n        <div className=\"dijkstra-results\">\r\n          <h3>Shortest Path from {source} to {destination}</h3>\r\n          <p>\r\n            {shortestPaths[destination] === Infinity\r\n              ? 'Destination is Unreachable'\r\n              : `Shortest Distance: ${shortestPaths[destination]}`}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DijkstraForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}